# Restaurant Kernel Agent - Environment Variables Template
# Copy this file to .env and fill in your actual values
# 
# SECURITY WARNING: Never commit .env files with actual secrets to version control!

# =============================================================================
# REQUIRED API KEYS - These must be set for the agent to function
# =============================================================================

# OpenAI API Key (required for GPT models)
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# AgentMail API Key (required for email verification code retrieval)
# Get your API key from: https://agentmail.to
AGENTMAIL_API_KEY=your-agentmail-api-key-here

# =============================================================================
# OPTIONAL API KEYS - For enhanced functionality
# =============================================================================

# Anthropic API Key (optional - for Claude model support)
# Get your API key from: https://console.anthropic.com/
# ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Azure OpenAI Configuration (optional - for Azure OpenAI models)
# AZURE_OPENAI_ENDPOINT=https://your-endpoint.openai.azure.com/
# AZURE_OPENAI_API_KEY=your-azure-openai-api-key-here

# Google API Key (optional - for Gemini models)
# GOOGLE_API_KEY=your-google-api-key-here

# Groq API Key (optional - for Groq models)
# GROQ_API_KEY=your-groq-api-key-here

# =============================================================================
# BROWSER USE CONFIGURATION
# =============================================================================

# Browser Use Logging Level (debug, info, warning, error)
BROWSER_USE_LOGGING_LEVEL=info

# Whether to run browser in headless mode (true for production, false for development)
BROWSER_USE_HEADLESS=true

# Maximum number of steps the browser agent can take
BROWSER_USE_MAX_STEPS=50

# Save conversation logs (true/false)
BROWSER_USE_SAVE_CONVERSATION=true

# =============================================================================
# TIMEOUT AND RETRY CONFIGURATION
# =============================================================================

# Default timeout for operations (milliseconds)
DEFAULT_TIMEOUT=30000

# Maximum timeout for long operations (milliseconds)
MAX_TIMEOUT=120000

# Number of retries for failed operations
MAX_RETRIES=3

# Delay between browser connection retries (seconds)
BROWSER_CONNECT_RETRY_DELAY=2

# =============================================================================
# EMAIL VERIFICATION SETTINGS
# =============================================================================

# Default inbox ID for OpenTable reservations
DEFAULT_INBOX_ID=opentable_2@agentmail.to

# Email polling interval (seconds)
EMAIL_POLL_INTERVAL=5

# Maximum time to wait for verification email (seconds)
EMAIL_VERIFICATION_TIMEOUT=120

# =============================================================================
# RESERVATION DEFAULT SETTINGS
# =============================================================================

# Default phone number for reservations (US format with country code)
DEFAULT_PHONE=+18777804236

# Default first name for reservations
DEFAULT_FIRST_NAME=WAGENT

# Default last name for reservations
DEFAULT_LAST_NAME=SRY

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

# Application log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log format (json for structured logging, text for human-readable)
LOG_FORMAT=json

# Enable performance monitoring (true/false)
ENABLE_PERFORMANCE_MONITORING=true

# =============================================================================
# ERROR TRACKING (OPTIONAL)
# =============================================================================

# Sentry DSN for error tracking (optional)
# Get your DSN from: https://sentry.io/
# SENTRY_DSN=https://your-sentry-dsn-here

# Environment name for error tracking
SENTRY_ENVIRONMENT=production

# Release version for error tracking
SENTRY_RELEASE=1.0.0

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Set to development for enhanced debugging
ENVIRONMENT=production

# Enable debug mode (true/false)
DEBUG=false

# Enable verbose browser logging (true/false)
VERBOSE_BROWSER_LOGGING=false

# Save screenshots on errors (true/false)
SCREENSHOT_ON_ERROR=true

# Enable video recording of browser sessions (true/false) - impacts performance
ENABLE_VIDEO_RECORDING=false

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Maximum number of concurrent browser sessions
MAX_CONCURRENT_SESSIONS=5

# Browser page load timeout (seconds)
PAGE_LOAD_TIMEOUT=30

# Browser navigation timeout (seconds)
NAVIGATION_TIMEOUT=30

# Element wait timeout (seconds)
ELEMENT_WAIT_TIMEOUT=10

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Enable input validation (true/false)
ENABLE_INPUT_VALIDATION=true

# Enable request rate limiting (true/false)
ENABLE_RATE_LIMITING=true

# Maximum requests per minute per client
MAX_REQUESTS_PER_MINUTE=60

# Enable CORS (true/false) - typically false for agent services
ENABLE_CORS=false

# =============================================================================
# DATA RETENTION
# =============================================================================

# Number of days to retain conversation logs
CONVERSATION_LOG_RETENTION_DAYS=7

# Number of days to retain browser session data
SESSION_DATA_RETENTION_DAYS=1

# Number of hours to retain temporary files
TEMP_FILE_RETENTION_HOURS=24

# =============================================================================
# KERNEL PLATFORM SPECIFIC
# =============================================================================

# Kernel app name (must match kernel_config.yaml)
KERNEL_APP_NAME=restaurant-reservation-agent

# Kernel app version
KERNEL_APP_VERSION=1.0.0

# Enable Kernel health checks (true/false)
ENABLE_HEALTH_CHECKS=true

# Health check interval (seconds)
HEALTH_CHECK_INTERVAL=30

# =============================================================================
# BROWSER SPECIFIC SETTINGS
# =============================================================================

# Browser type (chromium, firefox, webkit)
BROWSER_TYPE=chromium

# Browser launch arguments (comma-separated)
# Example: --no-sandbox,--disable-dev-shm-usage,--disable-gpu
BROWSER_ARGS=--no-sandbox,--disable-dev-shm-usage

# User agent string (optional - uses default if not set)
# USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36

# Browser viewport size (width x height)
BROWSER_VIEWPORT=1920x1080

# =============================================================================
# WEBHOOK NOTIFICATIONS (OPTIONAL)
# =============================================================================

# Slack webhook URL for notifications (optional)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url

# Discord webhook URL for notifications (optional)
# DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your/webhook/url

# =============================================================================
# DATABASE SETTINGS (OPTIONAL)
# =============================================================================

# If using database for conversation storage or analytics
# DATABASE_URL=postgresql://user:password@localhost:5432/restaurant_agent

# Redis URL for caching (optional)
# REDIS_URL=redis://localhost:6379/0

# =============================================================================
# EXAMPLE USAGE
# =============================================================================
# 
# After copying this file to .env and filling in your values:
# 
# 1. Install dependencies:
#    pip install -r requirements.txt
#    # or
#    uv sync
# 
# 2. Test local configuration:
#    python restaurant_kernel_agent.py
# 
# 3. Deploy to Kernel:
#    kernel login
#    kernel deploy restaurant_kernel_agent.py --config kernel_config.yaml
# 
# 4. Invoke the agent:
#    kernel invoke restaurant-reservation-agent make-reservation '{"date": "2025-08-31", "time": "7PM", "party_size": 2, "location": "San Francisco"}'