import os
from browser_use_sdk import BrowserUse
from dotenv import load_dotenv
from browser_use_sdk.types import (
    FileView,
    TaskItemView,
    TaskStatus,
    TaskStepView,
    TaskView,
    TaskCreateResponse,
    TaskListResponse,
    TaskGetLogsResponse,
    TaskGetOutputFileResponse,
    TaskGetUserUploadedFileResponse,
)

load_dotenv()

client = BrowserUse(
    api_key=os.getenv("BROWSER_USE_API_KEY"),
)

DATE = "2025-08-31"
TIME = "7PM"
PPL = 2
LOCATION = "San Francisco"
INBOX_ID = "opentable@agentmail.to"


task_details = f"""
    1. Go to opentable.com
    2. Search for available restaurant on {DATE} at {TIME} with {PPL} people in {LOCATION}
    3. Select the 1st restaurant from the result and use email {INBOX_ID} to make the reservation
"""


task = client.tasks.create(
    task=task_details,
)
print(f"Task created: {task.id}")

# Check task status and get result
import time

print("Waiting for task to complete...")
while True:
    try:
        task_status = client.tasks.retrieve(task.id)
        print(f"Task status: {task_status.status}")

        if task_status.status in ["finished", "stopped"]:
            break

        time.sleep(5)  # Wait 5 seconds before checking again
    except Exception as e:
        print(f"Error retrieving task status: {e}")
        print("Retrying in 10 seconds...")
        time.sleep(10)

if task_status.status == "finished":
    # Check if task was successful
    if hasattr(task_status, "isSuccess") and task_status.isSuccess:
        print("Task completed successfully!")

        # Get the final output
        if hasattr(task_status, "doneOutput") and task_status.doneOutput:
            print(f"Restaurant Results:\n{task_status.doneOutput}")
        else:
            print("No output generated by the task")
    else:
        print("Task finished but was not successful")
        if hasattr(task_status, "doneOutput") and task_status.doneOutput:
            print(f"Task output: {task_status.doneOutput}")

    # Show output files (screenshots, etc.)
    if hasattr(task_status, "outputFiles") and task_status.outputFiles:
        print(
            f"Generated {len(task_status.outputFiles)} output files - check Browser Use dashboard"
        )

    print("Check your Browser Use dashboard for screenshots and detailed results")
else:
    print(f"Task ended with status: {task_status.status}")
    if hasattr(task_status, "doneOutput") and task_status.doneOutput:
        print(f"Partial output: {task_status.doneOutput}")
