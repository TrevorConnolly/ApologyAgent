import os
from browser_use_sdk import BrowserUse
from dotenv import load_dotenv
from utils import get_copy_code
from browser_use_sdk.types import (
    FileView,
    TaskItemView,
    TaskStatus,
    TaskStepView,
    TaskView,
    TaskCreateResponse,
    TaskListResponse,
    TaskGetLogsResponse,
    TaskGetOutputFileResponse,
    TaskGetUserUploadedFileResponse,
)

load_dotenv()

client = BrowserUse(
    api_key=os.getenv("BROWSER_USE_API_KEY"),
)

DATE = "2025-08-31"
TIME = "7PM"
PPL = 2
LOCATION = "San Francisco"
INBOX_ID = "opentable@agentmail.to"


task_details = f"""
    1. Go to opentable.com
    2. Search for available restaurant on {DATE} at {TIME} with {PPL} people in {LOCATION}
    3. Select the 1st restaurant from the results and use email {INBOX_ID} to make the reservation
    4. When you see the screen asking for verification code, PAUSE and wait. Do not enter any code. Just report that verification is needed and PAUSE the task.
    5. Return the restaurant name and indicate verification code is needed
"""


task = client.tasks.create(
    task=task_details,
)
print(f"Task created: {task.id}")

# Check task status and get result
import time

print("Waiting for task to complete...")
while True:
    try:
        task_status = client.tasks.retrieve(task.id)
        print(f"Task status: {task_status.status}")

        if task_status.status in ["finished", "stopped"]:
            break

        time.sleep(5)  # Wait 5 seconds before checking again
    except Exception as e:
        print(f"Error retrieving task status: {e}")
        print("Retrying in 10 seconds...")
        time.sleep(10)

if task_status.status == "finished":
    # Check if task was successful
    if hasattr(task_status, "isSuccess") and task_status.isSuccess:
        print("Task completed successfully!")

        # Get the final output
        if hasattr(task_status, "doneOutput") and task_status.doneOutput:
            print(f"Restaurant Results:\n{task_status.doneOutput}")
        else:
            print("No output generated by the task")

        # Handle verification code workflow - create new task approach
        print("\n--- Handling verification code workflow ---")
        
        # Check if task is asking for verification
        if "verification" in str(task_status.doneOutput).lower() or "code" in str(task_status.doneOutput).lower():
            print("Task indicates verification code is needed. Retrieving code from email...")
            
            # Get verification code from email first
            try:
                copy_code = get_copy_code(INBOX_ID)
                if copy_code:
                    print(f"Found verification code: {copy_code}")
                    
                    # Create a new task to complete the verification using the same browser context
                    print("Creating verification completion task...")
                    try:
                        verification_task = client.tasks.create(
                            task=f"""
                            Continue from the current restaurant reservation where verification code is needed.
                            Enter the verification code: {copy_code}
                            Complete the reservation process and return the final confirmation details.
                            """
                        )
                        print(f"Created verification task: {verification_task.id}")
                        
                        # Wait for verification task to complete with timeout
                        print("Waiting for verification completion...")
                        verification_timeout = 300  # 5 minutes timeout
                        verification_start_time = time.time()
                        
                        while True:
                            current_time = time.time()
                            if current_time - verification_start_time > verification_timeout:
                                print("❌ Verification task timed out after 5 minutes")
                                break
                                
                            try:
                                verification_status = client.tasks.retrieve(verification_task.id)
                                print(f"Verification task status: {verification_status.status}")
                                
                                if verification_status.status in ["finished", "stopped"]:
                                    if (
                                        verification_status.status == "finished"
                                        and hasattr(verification_status, "isSuccess")
                                        and verification_status.isSuccess
                                    ):
                                        print("✅ Verification completed successfully!")
                                        if (
                                            hasattr(verification_status, "doneOutput")
                                            and verification_status.doneOutput
                                        ):
                                            print(f"Verification result: {verification_status.doneOutput}")
                                    else:
                                        print("❌ Verification task did not complete successfully")
                                        if hasattr(verification_status, "doneOutput"):
                                            print(f"Verification output: {verification_status.doneOutput}")
                                    break
                                
                                time.sleep(5)
                            except Exception as e:
                                print(f"❌ Error checking verification task status: {e}")
                                time.sleep(10)
                                
                    except Exception as e:
                        print(f"❌ Error creating verification task: {e}")
                        print("Manual verification may be required")
                        
                else:
                    print("❌ No verification code found in email. Possible causes:")
                    print("  - Email hasn't arrived yet")
                    print("  - Email is in spam/junk folder")
                    print("  - Incorrect inbox ID")
                    print("  - Email doesn't contain expected verification code format")
                    print("  - Try running the script again in a few moments")
                    
            except Exception as e:
                print(f"❌ Error retrieving verification code: {e}")
                print("Manual verification may be required")
        else:
            print("Task completed without requiring verification code entry.")

    else:
        print("Task finished but was not successful")
        if hasattr(task_status, "doneOutput") and task_status.doneOutput:
            print(f"Task output: {task_status.doneOutput}")

    # Show output files (screenshots, etc.)
    if hasattr(task_status, "outputFiles") and task_status.outputFiles:
        print(
            f"Generated {len(task_status.outputFiles)} output files - check Browser Use dashboard"
        )

    print("Check your Browser Use dashboard for screenshots and detailed results")
else:
    print(f"Task ended with status: {task_status.status}")
    if hasattr(task_status, "doneOutput") and task_status.doneOutput:
        print(f"Partial output: {task_status.doneOutput}")
